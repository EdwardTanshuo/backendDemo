{
  "_args": [
    [
      "pomelo-aoi@>=0.3.4",
      "/Users/shuotan/Desktop/project/game-server"
    ]
  ],
  "_from": "pomelo-aoi@>=0.3.4",
  "_id": "pomelo-aoi@0.3.34",
  "_inCache": true,
  "_installable": true,
  "_location": "/pomelo-aoi",
  "_npmUser": {
    "email": "zhang0925@126.com",
    "name": "demon"
  },
  "_npmVersion": "1.1.59",
  "_phantomChildren": {},
  "_requested": {
    "name": "pomelo-aoi",
    "raw": "pomelo-aoi@>=0.3.4",
    "rawSpec": ">=0.3.4",
    "scope": null,
    "spec": ">=0.3.4",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/pomelo-aoi/-/pomelo-aoi-0.3.34.tgz",
  "_shasum": "e3e9dfae6f21f09e723b4813943ee90af2fc73d7",
  "_shrinkwrap": null,
  "_spec": "pomelo-aoi@>=0.3.4",
  "_where": "/Users/shuotan/Desktop/project/game-server",
  "author": {
    "email": "zhang0925@gmail.com",
    "name": "XiaogangZhang"
  },
  "dependencies": {},
  "description": "pomelo-schedule is the aoi module used in the demo of pomelo.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "e3e9dfae6f21f09e723b4813943ee90af2fc73d7",
    "tarball": "https://registry.npmjs.org/pomelo-aoi/-/pomelo-aoi-0.3.34.tgz"
  },
  "main": "./lib/aoiService",
  "maintainers": [
    {
      "email": "zhang0925@126.com",
      "name": "demon"
    }
  ],
  "name": "pomelo-aoi",
  "optionalDependencies": {},
  "readme": "# pomelo-aoi\npomelo-schedule is the aoi module used in the demo of pomelo.\n\nThe aoi module include a set of aoi interface, and an implementation of tower aoi algorithm.  \n##Installation\n```\nnpm install pomelo-aoi\n```\n##Generate an aoi instance\nFor the aoi service can be used in many areas, each area use the aoi module should use it's own aoi instance.\nWe use a aoi factory to generate aoi instance, it accept an object as parameter, and return an aoi instance,  which can be used to implament the aoi function.   \n\n``` javascript\nvar aoiManager = require('pomelo-aoi');\nvar config = {\n\tmap : {\n\t\twidth : 3200,\n\t\theight : 2400\n\t},\n\ttower : {\n\t\twidth : 300,\n\t\theight : 300\n\t}\n}\n\nvar aoi = qoiManager.getService(config);\n```\n\n##Use the aoi service\nThe aoi instace has the basic interface for aoi action.\n\n``` javascript\n\t//Add object \n\taoi.addObject(obj, pos);\n\t\n\t//Remove object \n\taoi.removeObject(obj, pos);\n\t\n\t//Update object\n\taoi.updateObject(obj, oldPos, newPos);\n\t\n\t//Add watcher \n\taoi.addWatcher(watcher, pos, range);\n\t\n\t//Remove watcher\n\taoi.removeWatcher(watcher, pos, range0;\n\t\n\t//updateWatcher(watcher, oldPos, newPos, oldRange, newRange);\n``` \nMore api can be find in aoiService.js.\n\n##Handle aoi event\nThe aoi service will generate event when the status of objects or watchers changes. You can handler these event :\n``` javascript\n\taoi.on('add', function(params){\n\t\t//Handle add event\n\t});\n\n``` \nThe event of tower aoi are: 'add', 'remove', 'update' for aoi object, and 'updateWatcher' for watcher.\nOf course you can ignore all these events without do any effect to aoi function. \n",
  "version": "0.3.34"
}
